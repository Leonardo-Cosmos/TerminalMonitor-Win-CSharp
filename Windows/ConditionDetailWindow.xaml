<Window x:Class="TerminalMonitor.Windows.ConditionDetailWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TerminalMonitor.Windows"
        xmlns:controls="clr-namespace:TerminalMonitor.Windows.Controls"
        xmlns:rules="clr-namespace:TerminalMonitor.Windows.ValidationRules"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=local:ConditionDetailWindowDataContextVO}"
        Title="Condition Detail" SizeToContent="WidthAndHeight" Height="450" Width="800">
    <Window.Resources>
        <ResourceDictionary>
            <Style TargetType="GroupBox">
                <Setter Property="Margin" Value="3,2" />
            </Style>
            <Style TargetType="RadioButton">
                <Setter Property="Margin" Value="3,4" />
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style x:Key="checkBoxInvert" TargetType="CheckBox">
                <Setter Property="ToolTip" Value="Invert match result" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsInverted}" Value="False">
                        <Setter Property="Content" Value="🛑" />
                        <Setter Property="Foreground" Value="Green" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsInverted}" Value="True">
                        <Setter Property="Content" Value="⛔" />
                        <Setter Property="Foreground" Value="Red" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="checkBoxDefault" TargetType="CheckBox">
                <Setter Property="ToolTip" Value="Match by Default" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DefaultResult}" Value="False">
                        <Setter Property="Content" Value="☆" />
                        <Setter Property="Foreground" Value="Orange" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DefaultResult}" Value="True">
                        <Setter Property="Content" Value="★" />
                        <Setter Property="Foreground" Value="Gold" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="checkBoxDismiss" TargetType="CheckBox">
                <Setter Property="ToolTip" Value="Dismiss this condition in match" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsDisabled}" Value="False">
                        <Setter Property="Content" Value="⏺" />
                        <Setter Property="Foreground" Value="Green" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsDisabled}" Value="True">
                        <Setter Property="Content" Value="⏸" />
                        <Setter Property="Foreground" Value="Red" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <StackPanel Orientation="Vertical">
        <RadioButton Name="rdBtnSingle" Grid.Row="0" Content="Use single field condtion" 
                     GroupName="condition" Checked="RdBtnCondition_Checked" />        
        <GroupBox Name="grpBxSingleField" Header="Single Field">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <controls:FieldConditionView x:Name="fieldConditionView" Grid.Row="1" />
            </Grid>
        </GroupBox>

        <RadioButton Name="rdBtnMultiple" Content="Use multiple field condtion"
                     GroupName="condition" Checked="RdBtnCondition_Checked" />
        <GroupBox Name="grpBxMultipleField" Header="Multiple Field">
            <StackPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Label Name="lblConditionName" Grid.Row="0" Grid.Column="0" Content="Condition name (*)" />
                    <TextBox Name="txtBxConditionName" Grid.Row="0" Grid.Column="1"
                             Style="{StaticResource textBoxInValidation}"
                             Validation.ErrorTemplate="{StaticResource validationTemplate}">
                        <TextBox.Text>
                            <Binding Path="ConditionName" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <rules:NotEmptyRule ErrorMessage="Condition name is required" />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <StackPanel Grid.Column="0" Orientation="Horizontal">
                        <ComboBox Margin="10, 0, 10, 0"  ItemsSource="{StaticResource GroupMatchModes}" SelectedValue="{Binding MatchMode}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={StaticResource MatchModeToStringConverter}}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <CheckBox Name="chkBxNegative" Margin="2, 0" Style="{StaticResource checkBoxInvert}" IsChecked="{Binding IsInverted}" />
                        <CheckBox Name="chkBxDefault" Margin="2, 0" Style="{StaticResource checkBoxDefault}" IsChecked="{Binding DefaultResult}" />
                        <CheckBox Name="chkBxDismiss" Margin="2, 0" Style="{StaticResource checkBoxDismiss}" IsChecked="{Binding IsDisabled}" />
                    </StackPanel>

                    <Grid Name="grdButton" Grid.Column="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Button Name="btnAddField" Grid.Column="0" Width="20" Content="➕" Command="{Binding Path=AddFieldCommand}" />
                        <Button Name="btnAddGroup" Grid.Column="1" Width="30" Content="➕{}" Command="{Binding Path=AddGroupCommand}" />
                        <Button Name="btnRemove" Grid.Column="2" Width="20" Content="➖" Command="{Binding Path=RemoveCommand}" />
                        <Button Name="btnMoveUp" Grid.Column="3"  Width="20" Content="↑" ToolTip="Move Up" Command="{Binding Path=MoveUpCommand}" />
                        <Button Name="btnMoveDown" Grid.Column="4"  Width="20" Content="↓" ToolTip="Move Down" Command="{Binding Path=MoveDownCommand}" />
                    </Grid>
                </Grid>

                <TreeView Name="trConditions" MinHeight="50" SelectedItemChanged="TrConditions_SelectedItemChanged" MouseDown="TrConditions_MouseDown">
                    <TreeView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Cut" Command="{Binding Path=CutCommand}" />
                            <MenuItem Header="Copy" Command="{Binding Path=CopyCommand}" />
                            <MenuItem Header="Paste" Command="{Binding Path=PasteCommnad}" />
                            <Separator />
                            <MenuItem Header="Add Field" Command="{Binding Path=AddFieldCommand}" />
                            <MenuItem Header="Add Group" Command="{Binding Path=AddGroupCommand}" />
                            <MenuItem Header="Remove" Command="{Binding Path=RemoveCommand}" />
                        </ContextMenu>
                    </TreeView.ContextMenu>
                    <TreeView.Resources>
                        <Style x:Key="borderNode" TargetType="Border">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="Margin" Value="0, 2, 0, 2" />
                            <Setter Property="Padding" Value="5, 5, 10, 5" />
                        </Style>
                        
                        <HierarchicalDataTemplate DataType="{x:Type local:GroupConditionNodeVO}" ItemsSource="{Binding Conditions}">
                            <Border Style="{StaticResource borderNode}">
                                <StackPanel Orientation="Horizontal">
                                    <ComboBox Margin="0, 0, 10, 0"
                                        ItemsSource="{StaticResource GroupMatchModes}" SelectedValue="{Binding MatchMode}">
                                        <ComboBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Converter={StaticResource MatchModeToStringConverter}}" />
                                            </DataTemplate>
                                        </ComboBox.ItemTemplate>
                                    </ComboBox>
                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxInvert}" IsChecked="{Binding IsInverted}" />
                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxDefault}" IsChecked="{Binding DefaultResult}" />
                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxDismiss}" IsChecked="{Binding IsDisabled}" />
                                </StackPanel>
                            </Border>
                        </HierarchicalDataTemplate>
                        
                        <DataTemplate DataType="{x:Type local:FieldConditionNodeVO}">
                            <Border Style="{StaticResource borderNode}">
                                <StackPanel Orientation="Horizontal">
                                    <Label Name="lblKey" Content="Key" />
                                    <TextBox Name="txtBxKey" MinWidth="100" MaxWidth="200" Margin="0, 0, 10, 0" Text="{Binding FieldKey}" />

                                    <ComboBox Name="cmbBxOperator" Width="100" Margin="0, 0, 10, 0"
                                          ItemsSource="{StaticResource TextMatchOperators}"
                                          SelectedValue="{Binding MatchOperator}">
                                        <ComboBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Converter={StaticResource MatchOperatorToStringConverter}}" />
                                            </DataTemplate>
                                        </ComboBox.ItemTemplate>
                                    </ComboBox>

                                    <Label Name="lblValue" Content="Value" />
                                    <TextBox Name="txtBxValue" MinWidth="150" MaxWidth="300" Margin="0, 0, 10, 0" Text="{Binding TargetValue}" />

                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxInvert}" IsChecked="{Binding IsInverted}" />
                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxDefault}" IsChecked="{Binding DefaultResult}" />
                                    <CheckBox Margin="2, 0" Style="{StaticResource checkBoxDismiss}" IsChecked="{Binding IsDisabled}" />
                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </TreeView.Resources>
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}">
                            <Setter Property="IsExpanded" Value="True" />
                        </Style>
                    </TreeView.ItemContainerStyle>
                </TreeView>
            </StackPanel>
        </GroupBox>

        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Button Name="btnSave" Grid.Column="1" Content="Save" Click="BtnSave_Click" />
        </Grid>
    </StackPanel>
</Window>
